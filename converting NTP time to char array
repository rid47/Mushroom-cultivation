/********************
- www.geekstips.com
- Arduino Time Sync from NTP Server using ESP8266 WiFi module 
- Arduino code example
 ********************/

#include <WiFi.h>
#include <WiFiUdp.h>
#include <PubSubClient.h>


//WiFiClient espClient;


#define ACpin 12
#define Pumppin 13
#define Fanpin 14
char t1;

// Update these with values suitable for your network.
const char* ssid = "DataSoft_WiFi";
const char* password = "support123";

const char* mqtt_server = "iot.eclipse.org";
const int mqttPort = 1883;
//char ssid[] = "DataSoft_WiFi";  //  your network SSID (name)
//char pass[] = "support123";       // your network password


unsigned int localPort = 2390;      // local port to listen for UDP packets

/* Don't hardwire the IP address or we won't get the benefits of the pool.
 *  Lookup the IP address for the host name instead */
//IPAddress timeServer(129, 6, 15, 28); // time.nist.gov NTP server
IPAddress timeServerIP; // time.nist.gov NTP server address
//const char* ntpServerName = "time.nist.gov";
const char* ntpServerName = "bd.pool.ntp.org";



const int NTP_PACKET_SIZE = 48; // NTP time stamp is in the first 48 bytes of the message

byte packetBuffer[ NTP_PACKET_SIZE]; //buffer to hold incoming and outgoing packets

// A UDP instance to let us send and receive packets over UDP
WiFiUDP udp;
WiFiClient espClient;
PubSubClient client(espClient);

//-------------------------------Setup------------------------------------------//
void setup()
{
  Serial.begin(9600);
  Serial.println();
  Serial.println();

  // We start by connecting to a WiFi network

  setup_wifi();
  delay(10);
  Serial.println("Starting UDP");
  udp.begin(localPort);

  client.setServer(mqtt_server,mqttPort);
  client.setCallback(callback);
  //Serial.print("Local port: ");
  //Serial.println(udp.localPort());
}// End of Setup


//------------------------------------------WiFi setup--------------------------------------//

void setup_wifi() {
    delay(100);
  // We start by connecting to a WiFi network
    Serial.print("Connecting to ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) 
    {
      delay(500);
      Serial.print(".");
    }
  randomSeed(micros());
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}




//------------------------------loop-------------------------------------//


void loop()
{
  //get a random server from the pool
  WiFi.hostByName(ntpServerName, timeServerIP); 

  sendNTPpacket(timeServerIP); // send an NTP packet to a time server
  // wait to see if a reply is available
  delay(1000);
  
  int cb = udp.parsePacket();
  if (!cb) {
    Serial.println("no packet yet");
  }
  else {
    Serial.print("packet received, length=");
    Serial.println(cb);
    // We've received a packet, read the data from it
    udp.read(packetBuffer, NTP_PACKET_SIZE); // read the packet into the buffer

    //the timestamp starts at byte 40 of the received packet and is four bytes,
    // or two words, long. First, esxtract the two words:

    unsigned long highWord = word(packetBuffer[40], packetBuffer[41]);
    unsigned long lowWord = word(packetBuffer[42], packetBuffer[43]);
    // combine the four bytes (two words) into a long integer
    // this is NTP time (seconds since Jan 1 1900):
    unsigned long secsSince1900 = highWord << 16 | lowWord;
    Serial.print("Seconds since Jan 1 1900 = " );
    Serial.println(secsSince1900);

    // now convert NTP time into everyday time:
    Serial.print("Unix time = ");
    // Unix time starts on Jan 1 1970. In seconds, that's 2208988800:
    const unsigned long seventyYears = 2208988800UL;
    // subtract seventy years:
    unsigned long epoch = secsSince1900 - seventyYears;
    // print Unix time:
    Serial.println(epoch);


    // print the hour, minute and second:
    Serial.print("The UTC time is ");       // UTC is the time at Greenwich Meridian (GMT)
    Serial.print((epoch  % 86400L) / 3600); // print the hour (86400 equals secs per day)
    Serial.print(':');
    if ( ((epoch % 3600) / 60) < 10 ) {
      // In the first 10 minutes of each hour, we'll want a leading '0'
      Serial.print('0');
    }
    Serial.print((epoch  % 3600) / 60); // print the minute (3600 equals secs per minute)
    Serial.print(':');
    if ( (epoch % 60) < 10 ) {
      // In the first 10 seconds of each minute, we'll want a leading '0'
      Serial.print('0');
    }
    Serial.println(epoch % 60); // print the second
  
 
 //----------------------------Modifying time for comparison----------------------------//
  
  int hour=((epoch  % 86400L) / 3600)+6;
  int minute=(epoch  % 3600) / 60;
  int second= epoch % 60;

  String h="";
  String m="";
  String s="";
  
  if (hour<10)
  {h=h+'0'+hour;}
  else
  {h=h+hour;}

  if (minute<10)
  {m=m+'0'+minute;}
  else
  {m=m+minute;}

  if (second<10)
  {s=s+'0'+second;}
  else
  {s=s+second;}
  
  Serial.println(hour);
  Serial.println(minute);
  Serial.println(second);

  String Clock="";
  //Clock=Clock+h+','+m+','+s;
  Clock=Clock+h+','+m;
  char Time[68];
  Clock.toCharArray(Time,68);
  Serial.print("Time is:");
  Serial.println(Time);
  //if (strcmp(Time,t1)==0){

    //digitalWrite(ACpin,HIGH);
  //}
  delay(5000);
  
  
}}





// --------------------send an NTP request to the time server at the given address-------------------------//
unsigned long sendNTPpacket(IPAddress& address)
{
  Serial.println("sending NTP packet...");
  // set all bytes in the buffer to 0
  memset(packetBuffer, 0, NTP_PACKET_SIZE);
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  packetBuffer[0] = 0b11100011;   // LI, Version, Mode
  packetBuffer[1] = 0;     // Stratum, or type of clock
  packetBuffer[2] = 6;     // Polling Interval
  packetBuffer[3] = 0xEC;  // Peer Clock Precision
  // 8 bytes of zero for Root Delay & Root Dispersion
  packetBuffer[12]  = 49;
  packetBuffer[13]  = 0x4E;
  packetBuffer[14]  = 49;
  packetBuffer[15]  = 52;

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  udp.beginPacket(address, 123); //NTP requests are to port 123
  udp.write(packetBuffer, NTP_PACKET_SIZE);
  udp.endPacket();
}


//---------------------------While client not conncected---------------------------------//

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) 
  {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP32-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    //if your MQTT broker has clientID,username and password
    //please change following line to    if (client.connect(clientId,userName,passWord))
    if (client.connect(clientId.c_str()))
    {
      Serial.println("connected");
     //once connected to MQTT broker, subscribe command if any
      client.subscribe("mushroom/user_input");
      Serial.println("Subsribed to topic: mushroom/user_input");
      client.subscribe("mushroom/time1");
      Serial.println("Subsribed to topic: mushroom/time1");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 6 seconds before retrying
      delay(5000);
    }
  }
} //end reconnect()



//-----------------------Callback function-------------------------------------//

void callback(char* topic, byte* payload, unsigned int length) {
 
  Serial.print("Message arrived in topic: ");
  Serial.println(topic);
  /*if(strcmp(topic, "mushroom/user_input") == 0){
  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    char data=payload[i];
    
  
    if (data=='0')
    {
      digitalWrite(ACpin,LOW);
      Serial.print("AC OFF");
      
      }
      if (data=='1')
    {
      digitalWrite(ACpin,HIGH);
      Serial.print("AC ON");
      
      }
      if (data=='2')
    {
      digitalWrite(Pumppin,LOW);
      Serial.print("Pump OFF");
      
      }
      if (data=='3')
    {
      digitalWrite(Pumppin,HIGH);
      Serial.print("Pump ON");
      
      }
      if (data=='4')
    {
      digitalWrite(Fanpin,LOW);
      Serial.print("Fan OFF");
      
      }
      if (data=='5')
    {
      digitalWrite(Fanpin,HIGH);
      Serial.print("Fan ON");
      
      }
       
  }}

  

  
  Serial.println();
  Serial.println("-----------------------");*/

  if(strcmp(topic, "mushroom/time1") == 0){
  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    char data=payload[i];
    //Serial.println(data);
    //send_data(data);
    //t1=data[0]:data[4];
    //Serial.println(t1);
        
 
}
}}

/*
char send_data(char t[68])
{
  char data[68]=data;
  return data;
}
}*/
