//Including WiFi library for connectivity
// PubSubClient for using MQTT
#include <WiFi.h>
#include <PubSubClient.h>

// Defining requried pins

#define ACpin 12
#define Pumppin 13
#define Fanpin 14


//Defining WiFi and MQTT broker credentials

const char* ssid = "DataSoft_WiFi";
const char* password =  "support123";
const char* mqttServer = "iot.eclipse.org";
const int mqttPort = 1883;
const char* mqttUser = " ";
const char* mqttPassword = " ";
 
// defining class of the library

WiFiClient espClient;
PubSubClient client(espClient);


// Extracting message got from MQTT topic 

void callback(char* topic, byte* payload, unsigned int length) {
 
  Serial.print("Message arrived in topic: ");
  Serial.println(topic);
 
  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    char data=payload[i];
    
  
    if (data=='0')
    {
      digitalWrite(ACpin,LOW);
      Serial.print("AC OFF");
      
      }
      if (data=='1')
    {
      digitalWrite(ACpin,HIGH);
      Serial.print("AC ON");
      
      }
      if (data=='2')
    {
      digitalWrite(Pumppin,LOW);
      Serial.print("Pump OFF");
      
      }
      if (data=='3')
    {
      digitalWrite(Pumppin,HIGH);
      Serial.print("Pump ON");
      
      }
      if (data=='4')
    {
      digitalWrite(Fanpin,LOW);
      Serial.print("Fan OFF");
      
      }
      if (data=='5')
    {
      digitalWrite(Fanpin,HIGH);
      Serial.print("Fan ON");
      
      }
       
  }

  
  Serial.println();
  Serial.println("-----------------------");
 
}// end of callback()


// Connecting to MQTT broker

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) 
  {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    //if you MQTT broker has clientID,username and password
    //please change following line to    if (client.connect(clientId,userName,passWord))
    if (client.connect(clientId.c_str()))
    {
      Serial.println("connected");
     //once connected to MQTT broker, subscribe command if any
     client.subscribe("mushroom/user_input");
     Serial.println("Subsribed to topic: mushroom/user_input");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 6 seconds before retrying
      delay(6000);
    }
  }} // end of reconnect

// Connecting to wifi

void setup_wifi() {
   delay(100);
   
   Serial.print("Connecting to ");
   Serial.println(ssid);
   WiFi.begin(ssid, password);
   while (WiFi.status() != WL_CONNECTED) 
    {
      delay(500);
      Serial.print(".");
    }
  randomSeed(micros());
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}
 
void setup() {
 
  pinMode(ACpin,OUTPUT);
  pinMode(Pumppin,OUTPUT);
  pinMode(Fanpin,OUTPUT);

  digitalWrite(ACpin,LOW);
  digitalWrite(Pumppin,LOW);
  digitalWrite(Fanpin,LOW);
  
  Serial.begin(115200);

  setup_wifi();
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);
 
}
 
void loop() {

  
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

}
  

  
