#include "WiFi.h"
#include <PubSubClient.h>


#include "DHT.h"        // including the library of DHT11 temperature and humidity sensor
#define DHTTYPE DHT11   // DHT 11

#define  light_sensor 25
#define dht_dpin 26
#define co2_sensor 27 


// Update these with values suitable for your network.
const char* ssid = "DataSoft_WiFi";
const char* password = "support123";
//const char* mqtt_server = "broker.mqtt-dashboard.com";
const char* mqtt_server = "iot.eclipse.org";

WiFiClient espClient;
PubSubClient client(espClient);


// Definig variables
//long lastMsg = 0;
char data[16];

String msg="";
DHT dht(dht_dpin, DHTTYPE); 


long temp=0;
long hum=0;
long light=0; 
long co2=0;


//...............Reading Sensor Data...........................//


long hum_data()
{
    
    long h = dht.readHumidity();
             
    Serial.println("Current humidity = ");
    Serial.println(h);
    Serial.println("%  ");
    
    delay(10);
    return (h);
  }
 
long temp_data(){
 
 long t = dht.readTemperature();
 Serial.println("temperature = ");
 Serial.println(t); 
 Serial.println("C  ");
 
 delay(10);
 return (t);
 }
 
 long light_intensity(){
  
  long l = analogRead(light_sensor);
  Serial.println(l);
  delay(10);
  return(l);
}

long co2_in_ppm(){

long co2now[10];//long array for co2 readings
long co2raw=0;  //long for raw value of co2
long co2comp = 0;   //long for compensated co2 
long co2ppm = 0;    //long for calculated ppm
long sum=0;
//Serial.printlnln(analogRead(anInput));
for (int x=0;x<10;x++){

co2now[x]=analogRead(co2_sensor);
delay(500);
sum=sum+co2now[x];
}
co2raw=sum/10;
co2ppm=map(co2raw,0,1023,400,5000);
Serial.println(co2ppm); 
delay(10);
return co2ppm; 
  
}

//----------------------------------WiFi Setup-----------------------------------------//

void setup_wifi() {
    delay(100);
  // We start by connecting to a WiFi network
    Serial.println("Connecting to ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) 
    {
      delay(500);
      Serial.println(".");
    }
  randomSeed(micros());
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

//-------------------------------MQTT client connection--------------------------------//

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) 
  {
    Serial.println("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP32SClient-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    //if your MQTT broker has clientID,username and password
    //please change following line to    if (client.connect(clientId,userName,passWord))
    if (client.connect(clientId.c_str()))
    {
      Serial.println("connected");
     //once connected to MQTT broker, subscribe command if any
      //client.subscribe("OsoyooCommand");
    } else {
      Serial.println("failed, rc=");
      Serial.println(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 6 seconds before retrying
      delay(5000);
    }
  }
} //end reconnect()





void setup()
{ 
  dht.begin();
  Serial.begin(9600);
  pinMode(light_sensor, INPUT);
  pinMode(co2_sensor,INPUT);

  setup_wifi();
  client.setServer(mqtt_server, 1883);  
  
  }


void loop() {
  
      /*if (!client.connected()) {
           reconnect();
   }
      client.loop();
      */
      hum=hum_data();
      delay(10);
      Serial.println("Humidity:");
      Serial.println(hum);
      Serial.println("Temperature:");
      temp=temp_data();
      delay(10);
      Serial.println(temp);
      light= light_intensity();
      delay(10);
      Serial.println("light_intensity:");
      Serial.println(light);
      co2=co2_in_ppm();
      delay(10);
      Serial.println("Co2:");
      Serial.println(co2);


      msg=msg+temp+','+hum+','+light+','+co2;
      msg.toCharArray(data,16);//The publish functions expect char[] types to be passed in rather than Strings
      Serial.println(msg);
      msg="";
      /*long now = millis();

      if (now - lastMsg > 5000){
        lastMsg = now;
       */
      

      
       
      //client.publish("mushroom/sensor_data",data);
      delay(1000);
        
      }
