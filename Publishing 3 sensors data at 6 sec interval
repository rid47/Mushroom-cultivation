#include "WiFi.h"
#include <PubSubClient.h>
#include "DHT.h"        // including the library of DHT11 temperature and humidity sensor
#define DHTTYPE DHT11   // DHT 11

#define light_sensor 34
#define dht_dpin 26
#define co2_sensor 35 




// Update these with values suitable for your network.
const char* ssid = "DataSoft_WiFi";
const char* password = "support123";
//const char* mqtt_server = "broker.hivemq.com";
const char* mqtt_server = "iot.eclipse.org";


WiFiClient espClient;
PubSubClient client(espClient);



DHT dht(dht_dpin, DHTTYPE); 




// Definig variables

int data1=0;
int data2=0;
int data3=0;
int data4=0;
long lastMsg = 0;


void setup()
{ 

  pinMode(light_sensor,INPUT);
  pinMode(dht_dpin,INPUT);
  pinMode(co2_sensor,INPUT);
  
  dht.begin();
  
  
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  Serial.begin(9600);
  
  //delay(700);

}
void loop() {


  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  long now=millis();
  if(now-lastMsg>6000){

  lastMsg=now;

  data1=temp();
  data2=hum();
  data3=co2();
  data4=analogRead(light_sensor);

  String msg=""; 
  msg= msg+ data1+","+data2+","+data3+","+data4;
  char message[68];
  msg.toCharArray(message,68);
 //Serial.println(msg);
 Serial.println(message);
 client.publish("mushroom/sensor_data",message);

  }
  }

  
  
     
//-----------------------------WiFi-------------------------------------------//
void setup_wifi() {
    delay(100);
  // We start by connecting to a WiFi network
    Serial.print("Connecting to ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) 
    {
      delay(500);
      Serial.print(".");
    }
  randomSeed(micros());
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

//---------------------------While client not conncected---------------------------------//

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) 
  {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP32-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    //if your MQTT broker has clientID,username and password
    //please change following line to    if (client.connect(clientId,userName,passWord))
    if (client.connect(clientId.c_str()))
    {
      Serial.println("connected");
     //once connected to MQTT broker, subscribe command if any
      //client.subscribe("OsoyooCommand");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 6 seconds before retrying
      delay(5000);
    }
  }
} //end reconnect()


//---------------------Reading sensor data-------------------------------------//


int temp()
{
    
    
    int t = dht.readTemperature();         
    
   /* Serial.print("temperature = ");
    Serial.print(t); 
    Serial.println("C  ");*/
    delay(500);
    return t;
   
  }

int hum()
{
  int h = dht.readHumidity();
  delay(500);
  /*Serial.print("Current humidity = ");
  Serial.print(h);
  Serial.print("%  ");*/
  return h;
  
  }

int co2(){

int co2now[10];//long array for co2 readings
int co2raw=0;  //long for raw value of co2
int co2comp = 0;   //long for compensated co2 
int co2ppm = 0;    //long for calculated ppm
int sum=0;
//Serial.printlnln(analogRead(anInput));
for (int x=0;x<10;x++){

co2now[x]=analogRead(co2_sensor);
delay(200);
sum=sum+co2now[x];
}
co2raw=sum/10;
co2ppm=map(co2raw,0,1023,400,5000);
//Serial.println(co2ppm); 
//delay(500);
return co2ppm; 
  
}

/*
int light(){
  
  l = analogRead(light_sensor);
  Serial.println(l);
  delay(500);
  return(l);
}*/
