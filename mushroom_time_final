#include "WiFi.h"
#include <PubSubClient.h>

#define ACpin 12
#define Pumppin 13
#define Fanpin 14

//----------------User given time spliting variables---------------------------//

const int numberOfPieces = 3;
String pieces[numberOfPieces];

// This will be the buffered string from Serial.read()
// up until you hit a \n
// Should look something like "123,456,789,0"
String input = "";

// Keep track of current position in array
int counter = 0;

// Keep track of the last comma so we know where to start the substring
int lastIndex = 0;


//-----------------------------------char array to hold payload message------------------------------------//

char Data[58];

// ------------------------WiFi AND MQTT credentials------------------------------------------------------//


const char* ssid = "DataSoft_WiFi";
const char* password = "support123";
//const char* mqtt_server = "broker.hivemq.com";
const char* mqtt_server = "iot.eclipse.org";
const int mqttPort = 1883;

WiFiClient espClient;
PubSubClient client(espClient);


//----------------------------Setup----------------------------------//
 
void setup()
{ 
  
  Serial.begin(9600);
  setup_wifi();
  client.setServer(mqtt_server,mqttPort);
  client.setCallback(callback);
  
  
  //delay(700);

}



//-----------------------------loop---------------------------------------//

void loop() {


  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  Serial.println(pieces[0]);
  delay(500);
  Serial.println(pieces[1]);
  delay(500);
  Serial.println(pieces[2]);
  delay(500);
  
 } //end of loop

  
  
//-----------------------------WiFi-------------------------------------------//

void setup_wifi() {
    delay(100);
  // We start by connecting to a WiFi network
    Serial.print("Connecting to ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) 
    {
      delay(500);
      Serial.print(".");
    }
  randomSeed(micros());
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  }


//---------------------------While client not conncected---------------------------------//


void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) 
  {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP32-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    //if your MQTT broker has clientID,username and password
    //please change following line to    if (client.connect(clientId,userName,passWord))
    if (client.connect(clientId.c_str()))
    {
      Serial.println("connected");
     //once connected to MQTT broker, subscribe command if any
      client.subscribe("mushroom/user_input");
      Serial.println("Subsribed to topic: mushroom/user_input");
      client.subscribe("mushroom/time");
      Serial.println("Subsribed to topic: mushroom/time");
      client.subscribe("mushroom/temperature_threshold");
      Serial.println("Subsribed to topic: mushroom/temperature_threshold");
      
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 6 seconds before retrying
      delay(5000);
    }
  }
} //end reconnect()




//-----------------------Callback function-------------------------------------//

void callback(char* topic, byte* payload, unsigned int length) {
 
  Serial.print("Message arrived in topic: ");
  Serial.println(topic);
  Serial.print("length:");
  Serial.println(length);
  if(strcmp(topic, "mushroom/time") == 0){
  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
   //Serial.print((char)payload[i]);
    //input=input+payload[i];
    Data[i]=payload[i];
    }
      Serial.print("Data:");
      Serial.println(Data);
      input=input+Data;
      Serial.print("input:");
      Serial.print(input);
      // Loop through each character and check if it's a comma
      Serial.print("input length:");
      Serial.println(input.length());
       for (int i = 0; i < input.length(); i++){  
        
        if (input.substring(i, i+1) == ",") {
          // Grab the piece from the last index up to the current position and store it
          pieces[counter] = input.substring(lastIndex, i);
          Serial.println(pieces[counter]);
          // Update the last position and add 1, so it starts from the next character
          lastIndex = i + 1;
          // Increase the position in the array that we store into
          counter++;
        }

        // If we're at the end of the string (no more commas to stop us)
        Serial.print("last string strat at: ");
        Serial.println(i);
        if (i == input.length()-1) {
          // Grab the last part of the string from the lastIndex to the end
          pieces[counter] = input.substring(lastIndex, i+1);
          Serial.println(pieces[counter]);
        }}
         
      // Clear out string and counters to get ready for the next incoming string
      input = "";
      counter = 0;
      lastIndex = 0;
    

      
      }}      
