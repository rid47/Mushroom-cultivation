//Download adafruit unified sensor library if you haven't already
//-----------------------------Including required libraries-------------------------------------------------//
#include <time.h> // Library to read time from server
#include "DHT.h"
#include "WiFi.h"
#include<ESP32Ticker.h>
Ticker secondTick;
#include <PubSubClient.h>



// -----------------------------------------begin of OTA section------------------------------------
#include "OTA_ESP32.h"
char* OTA_WiFi_SSID="DataSoft_WiFi";// = "Mashroom Centar";
char* OTA_WiFi_Password="support123";// = "mdiculturehouse";
char* OTA_url_binFile="/OTA/Mushroom_Cultivation/mushroom.ino.esp32.bin";
char* OTA_url_versionFile="/OTA/Mushroom_Cultivation/version.txt";
char* OTA_host = "182.163.112.207"; // Host url of the server where update file reside in
int OTA_port= 80; // Non https. For HTTPS 443. As of today, HTTPS doesn't work.
WiFiClient wificlient;//this WiFiClient type object named "wificlient" is extern into OTA_ESP32.cpp file
// ----------------------------------------- end of OTA section ------------------------------------

//-----------------------------Defining required pins-------------------------------------------------------//
#define light_sensor 34
#define dht_dpin 26
#define co2_sensor 35 
#define ACpin 12
#define Pumppin 13
#define Fanpin 14

#define DHTTYPE DHT11

long data_publishing_interval=300000;
long clock_reading_interval=50000;

//-----------------------Real time clock (from server)-----------------------------------//

String Clock="";
String h="";
String m="";
int hour_length;
int minute_length;
int timezone = 6; //Timezone for Dhaka UTC+6

//----------------User given time spliting variables---------------------------//

char Data[30];
const int numberOfPieces = 5;
String t[numberOfPieces];
String input;
// Keep track of current position in time array
int counter = 0;

// Keep track of the last comma so we know where to start the substring
int lastIndex = 0;

char Time0[6];
char Time1[6];
char Time2[6];
char Time3[6];
char Time4[6];

//-------------------Storing temperature threshold from user end--------------------------------------------//

String input2;
char Data2[6];
char Data3[6];
String msg2;

//--------------------------------WiFi and MQTT credentials-----------------------------------------------//

//mushroom center wifi credentials:
//ssid: Mashroom Centar
//pass: mdiculturehouse

//const char* ssid = "DataSoft_WiFi";
//const char* password = "support123";
const char* mqtt_server = "182.163.112.207";
const int mqttPort = 1883;

WiFiClient espClient;
PubSubClient client(espClient);

DHT dht(dht_dpin, DHTTYPE); 


int data1=0;
int data2=0;
int data3=0;
int data4=0;
unsigned long lastMsg = 0;
unsigned long previousMillis = 0;


//------------------------Storing Hardware Status----------------------------//

String fanStatus="off";
String pumpStatus="off";

//------------------------WATCH DOG SUBROUTINE-------------------------------//

//int watchdogCount=0;
volatile int watchdogCount=0;
void ISRwatchdog(){


  watchdogCount++;
  if(watchdogCount==100){


    //Serial.println();
    Serial.print("The watch dog bites......");
    ESP.restart();
  }
}

void setup()
{ 

  Serial.begin(115200);
  pinMode(light_sensor,INPUT);
  pinMode(dht_dpin,INPUT);
  pinMode(co2_sensor,INPUT);


  pinMode(ACpin,OUTPUT);
  pinMode(Pumppin,OUTPUT);
  pinMode(Fanpin,OUTPUT);

  digitalWrite(ACpin,LOW);
  digitalWrite(Pumppin,HIGH);
  digitalWrite(Fanpin,HIGH);

  secondTick.attach(1,ISRwatchdog);
  dht.begin();
  //setup_wifi();
  client.setServer(mqtt_server,mqttPort);
  client.setCallback(callback);
  configTime(timezone * 3600, 0, "bd.pool.ntp.org", "bsti1.time.gov.bd");
  
}

//----------------------------------------Main Loop------------------------------------//

void loop(){

  //Serial.print("Watch dog counter:");
   watchdogCount=0;
  //Serial.println(watchdogCount);
  
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  data1=temp();
  data2=hum();
  delay(200);
  data3=co2();
  data4=light();
  
  if (data1<50){

  sensor_data_publish();
  
  }
  
  msg2="";
  msg2=msg2+data1;
 
  if(msg2>input2)
 {
  //Serial.println("AC On");
  digitalWrite(ACpin,HIGH);
 } 
  else

  {
    //Serial.println("AC off");
    digitalWrite(ACpin,LOW);
  }

  //time_from_user_end();
  //delay(100);
  
  
  
//------------------Reading clock @ every 50s interval---------------------------//


  unsigned long currentMillis=millis();
  if(currentMillis-previousMillis>clock_reading_interval)
  {
  previousMillis=currentMillis;  
  actual_time();
  //delay(500); 
  
  
  //Serial.print("Actual time:");
  //Serial.println(Clock);
  }

 
  
  
//--------------------------------USER TIME & ACTUAL TIME COMPARISON--------------------------//

 if (Clock!=""){
 if (Clock == Time0 || Clock == Time1|| Clock == Time2 || Clock == Time3 || Clock == Time4)
  {

    digitalWrite(Pumppin,LOW);
    Serial.println("Pump on");
    pumpStatus="on";
    
    //client.publish("mushroom/ack","1");

    digitalWrite(Fanpin,LOW);
    Serial.println("Fan on");
    fanStatus="on";
    //client.publish("mushroom/ack","2");
    client.publish("mushroom/ack","0");
    delay(60000);//use millis here 
    
    
    digitalWrite(Pumppin,HIGH);
    digitalWrite(Fanpin,HIGH);
    

    //client.publish("mushroom/ack","Pump off");
    //client.publish("mushroom/ack","Fan off");
    pumpStatus="off";
    fanStatus="off";
  }
  }
}// END  OF LOOP
  
  
  
//--------------------------Actual time---------------------------------------------------------//

void actual_time(){

  time_t now;
  struct tm * timeinfo;
  time(&now);
  timeinfo = localtime(&now);
  
  h= timeinfo->tm_hour;
  m= timeinfo->tm_min;
  
  hour_length=h.length();
  minute_length=m.length();
  if(hour_length==1){
  h="0"+h;
  }
  if(minute_length==1){
  m="0"+m;
 }
  
  

  Clock=h+":"+m;
  Serial.print("Current Time:");
  Serial.println(Clock);
 
    
}


//-------------------------------Reading Sensor Data--------------------------------------------//


int temp()
{
  
  int t = dht.readTemperature();         
  return t;
   
  }

int hum()
{
  int h = dht.readHumidity();
  return h;
  
  }

int co2(){

int co2now[10];//long array for co2 readings
int co2raw=0;  //long for raw value of co2
int co2comp = 0;   //long for compensated co2 
int co2ppm = 0;    //long for calculated ppm
int sum=0;
for (int x=0;x<10;x++){

co2now[x]=analogRead(co2_sensor);
sum=sum+co2now[x];
}
co2raw=sum/10;
co2raw=co2raw-55;
co2ppm=map(co2raw,0,4095,300,2000);
return co2ppm; 
  
}


int light(){
  
  int l = analogRead(light_sensor);
  int light_intensity=map(l,0,4095,80,400);
  return light_intensity;
}


//-----------------------------WiFi-------------------------------------------//
/*
void setup_wifi() {
    
    delay(100);
  // We start by connecting to a WiFi network
    Serial.print("Connecting to ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) 
    {
      delay(500);
      Serial.print(".");
    }
    randomSeed(micros());
    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
}
*/
//---------------------------While client not conncected---------------------------------//

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) 
  {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP32-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    //if your MQTT broker has clientID,username and password
    //please change following line to    if (client.connect(clientId,userName,passWord))
    if (client.connect(clientId.c_str()))
    {
      Serial.println("connected");
      
      //publising "device online" to mushroom/online to remotely check if device is online

      client.publish("mushroom/online","Device online");
     
     //once connected to MQTT broker, subscribe command if any
     //----------------------Subscribing to required topics-----------------------//

     
      client.subscribe("mushroom/user_input");
      Serial.println("Subsribed to topic: mushroom/user_input");
      client.subscribe("mushroom/temp");
      Serial.println("Subsribed to topic: mushroom/temp");
      client.subscribe("mushroom/time");
      Serial.println("Subsribed to topic: mushroom/time");
      client.subscribe("mushroom/chk-status");
      Serial.println("Subsribed to topic: mushroom/chk-status");
      client.subscribe("mushroom/reset");
      Serial.println("Subsribed to topic: mushroom/reset");
      client.subscribe("mushroom/deviceTime");
      Serial.println("Subsribed to topic: mushroom/devicetime");
      
      
     
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 6 seconds before retrying
      delay(5000);
    }
  }
} //end reconnect()


//------------------------------Publishing sensor data every 5 minutes----------------------------------//


void sensor_data_publish(){

  unsigned long now=millis();
  if(now-lastMsg>data_publishing_interval){
    
    lastMsg=now;
    String msg=""; 
    msg= msg+ data2+","+data1+","+data3+","+data4;
    char message[68];
    msg.toCharArray(message,68);
   //Serial.println(msg);
    Serial.println(message);
    client.publish("mushroom/sensor_data",message);
  }

 

}


//-----------------------Callback function-------------------------------------//


void callback(char* topic, byte* payload, unsigned int length) {
 
  Serial.print("Message arrived in topic: ");
  Serial.println(topic);
  
//-----------------------Publishing hardware status upon request-------------//

if(strcmp(topic, "mushroom/chk-status") == 0){
  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    char data=payload[i];
    
  
      if (data=='1')
    {
      char Status1[5]={};
      char Status2[5]={};


      pumpStatus.toCharArray(Status1,6);
      fanStatus.toCharArray(Status2,6);
      Serial.print("Pump Status:");
      Serial.println(Status1);
      Serial.print("Fan Status:");
      Serial.println(Status2);
      client.publish("mushroom/fan-status",Status2);
      client.publish("mushroom/pump-status",Status1);
      }
  }}



//------------------------user_input for manual load control-----------------//


  if(strcmp(topic, "mushroom/user_input") == 0){
  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    char data=payload[i];
    
  
      if (data=='2')
    {
      digitalWrite(Pumppin,LOW);
      Serial.println("Pump ON");
      pumpStatus="on";
      
      }
      if (data=='3')
    {
      digitalWrite(Pumppin,HIGH);
      Serial.println("Pump OFF");
      pumpStatus="off";
      }
      if (data=='4')
    {
      digitalWrite(Fanpin,HIGH);
      Serial.println("Fan OFF");
      fanStatus="off";
      
      }
      if (data=='5')
    {
      digitalWrite(Fanpin,LOW);
      Serial.println("Fan ON");
      fanStatus="on";
      }
       
  }}
  

   //-----------------------------Getting temperature threshold from user--------------------------------//


      if(strcmp(topic, "mushroom/temp") == 0)
      {

        Serial.print("Message:");
        for (int i = 0; i < length; i++) {
        Data2[i]=payload[i];
    }
    
    input2="";
    input2=input2+Data2;
    Serial.println(input2);
    
    }

   //------------------------------Getting time from user end-------------------------//


if(strcmp(topic, "mushroom/time") == 0){

  
  Serial.print("Message:");
  memset(Data, 0, sizeof(Data));//Resetting the array with all zeros
  Serial.print("Data array size:");
  Serial.println(sizeof(Data));
  Serial.print("Data before getting msg:");
  Serial.println(Data);
  
  
  t[0]="00:00";
  t[1]="00:00";
  t[2]="00:00";
  t[3]="00:00";
  t[4]="00:00";
  for (int i = 0; i < length; i++) {
   //Serial.print((char)payload[i]);
    //input=input+payload[i];
    Data[i]=payload[i];
    }
      Serial.print("Data:");
      Serial.println(Data);
      input=input+Data;
      Serial.print("input:");
      Serial.print(input);
      // Loop through each character and check if it's a comma
      Serial.print("input length:");
      Serial.println(input.length());
       for (int i = 0; i < input.length(); i++){  
        
        if (input.substring(i, i+1) == ",") //input.substring: This method extracts the characters in a string 
                                            //between "start" and "end", not including "end" itself
        {
          // Grab the piece from the last index up to the current position and store it
          t[counter] = input.substring(lastIndex, i);
          Serial.println(t[counter]);
          // Update the last position and add 1, so it starts from the next character
          lastIndex = i + 1;
          // Increase the position in the array that we store into
          counter++;
        }

        // If we're at the end of the string (no more commas to stop us)
        Serial.print("last string start at: ");
        Serial.println(i);
        if (i == input.length()-1) {
          // Grab the last part of the string from the lastIndex to the end
          t[counter] = input.substring(lastIndex, i+1);
          Serial.println(t[counter]);
        }}
         
      // Clear out string and counters to get ready for the next incoming string
      input = "";
      counter = 0;
      lastIndex = 0;
      time_from_user_end();
    }


//---------------------------Reset the board from Engineer's end----------------------------//

if(strcmp(topic, "mushroom/reset") == 0){
  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    char data5=payload[i];
    
  
    if (data5=='1')
    {
      
      Serial.println("Resetting NodeMCU.........");
      ESP.restart();
      }}}

if(strcmp(topic, "mushroom/deviceTime") == 0){
  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    char data6=payload[i];
    Serial.print(data6);
  
    if (data6=='1')
    {

      
      //Serial.print(" I'm here ");
      Clock.toCharArray(Data3,6);
      client.publish("mushroom/currentTime",Data3);
      Serial.print("Current time is:");
      Serial.println(Data3);
 
      }
      }
      }
       

    
}
  
//--------------------------Time from user end---------------------//


void time_from_user_end(){

  
 memset(Time0,0,sizeof(Time0));
 memset(Time1,0,sizeof(Time1));
 memset(Time2,0,sizeof(Time2));
 memset(Time3,0,sizeof(Time3));
 memset(Time4,0,sizeof(Time4));
 /*
 Time0[6]='\0';
 Time1[6]='\0';
 Time2[6]='\0';
 Time3[8]='\0';
 Time4[8]='\0';
  */
  
  
  t[0].toCharArray(Time0,6);
  Serial.print("Time0:");
  Serial.println(Time0);
  t[1].toCharArray(Time1,6);
  Serial.print("Time1:");
  Serial.println(Time1);
  //Serial.print("t[2]");
  //Serial.println(t[2]);
  t[2].toCharArray(Time2,6);
  Serial.print("Time2:");
  Serial.println(Time2);
  t[3].toCharArray(Time3,6);
  Serial.print("Time3:");
  Serial.println(Time3);
  t[4].toCharArray(Time4,6);
  Serial.print("Time4:");
  Serial.println(Time4);
  
}
